#!/usr/bin/env bash

# Colors and styling
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
DIM='\033[2m'
ITALIC='\033[3m'
NC='\033[0m'

# Unicode symbols
CHECK_MARK="\033[0;32m✓\033[0m"
CROSS_MARK="\033[0;31m✗\033[0m"
ARROW="→"
GEAR="⚙"
KEY="🔑"
FOLDER="📁"
DOWNLOAD="📥"

# Directories
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
HOME_DIR="$HOME"
CONFIG_DIR="$HOME_DIR/.config"
DOTFILES_DIR="$HOME_DIR/dotfiles"
SCRIPTS_DIR="$HOME_DIR/lib/scripts"
IMAGES_DIR="$HOME_DIR/lib/images"
THEMES_DIR="$HOME_DIR/.themes"
SSH_DIR="$HOME_DIR/.ssh"

# Repository URLs
DOTFILES_REPO="git@github.com:abereg01/dotfiles.git"
WALLPAPERS_REPO="git@github.com:abereg01/wallpapers.git"
SCRIPTS_REPO="git@github.com:abereg01/scripts.git"
THEMES_REPO="git@github.com:abereg01/themes.git"

# Log functions
log_info() {
    echo -e "${BLUE}${GEAR} INFO: ${NC}$1"
}

log_success() {
    echo -e "${GREEN}${CHECK_MARK} SUCCESS: ${NC}$1"
}

log_error() {
    echo -e "${RED}${CROSS_MARK} ERROR: ${NC}$1"
    exit 1
}

log_warning() {
    echo -e "${YELLOW}⚠ WARNING: ${NC}$1"
}

# Check if running as root
check_root() {
    if [ "$EUID" -eq 0 ]; then
        log_error "Please do not run this script as root"
    fi
}

# Check for required commands
check_requirements() {
    log_info "Checking system requirements..."
    command -v pacman >/dev/null 2>&1 || log_error "pacman is required but not installed"
    command -v git >/dev/null 2>&1 || log_error "git is required but not installed"
}

# Create required directories
create_directories() {
    log_info "Creating required directories..."
    mkdir -p "$CONFIG_DIR"
    mkdir -p "$DOTFILES_DIR"
    mkdir -p "$SCRIPTS_DIR"
    mkdir -p "$IMAGES_DIR"
    mkdir -p "$THEMES_DIR"
    mkdir -p "$SSH_DIR"
    log_success "Directories created"
}

# Install packages
install_packages() {
    log_info "Installing required packages..."
    
    packages=(
        base base-devel
        git curl wget
        networkmanager network-manager-applet
        pipewire pipewire-alsa pipewire-pulse pipewire-jack
        fish starship
        kitty alacritty
        neovim vim
        dunst libnotify
        thunar
        feh eza bat btop ripgrep unzip
    )
    
    sudo pacman -Syu --noconfirm || log_error "Failed to update system"
    sudo pacman -S --needed --noconfirm "${packages[@]}" || log_error "Failed to install packages"
    
    log_success "Packages installed successfully"
}

# Clone repositories
clone_repos() {
    log_info "Cloning repositories..."
    
    # Clone dotfiles
    if [ ! -d "$DOTFILES_DIR/.git" ]; then
        git clone "$DOTFILES_REPO" "$DOTFILES_DIR" || log_error "Failed to clone dotfiles"
    else
        log_warning "Dotfiles repository already exists, skipping..."
    fi
    
    # Clone wallpapers
    if [ ! -d "$IMAGES_DIR/.git" ]; then
        git clone "$WALLPAPERS_REPO" "$IMAGES_DIR" || log_error "Failed to clone wallpapers"
    else
        log_warning "Wallpapers repository already exists, skipping..."
    fi
    
    # Clone scripts
    if [ ! -d "$SCRIPTS_DIR/.git" ]; then
        git clone "$SCRIPTS_REPO" "$SCRIPTS_DIR" || log_error "Failed to clone scripts"
    else
        log_warning "Scripts repository already exists, skipping..."
    fi
    
    # Clone themes
    if [ ! -d "$THEMES_DIR/.git" ]; then
        git clone "$THEMES_REPO" "$THEMES_DIR" || log_error "Failed to clone themes"
    else
        log_warning "Themes repository already exists, skipping..."
    fi
    
    log_success "Repositories cloned successfully"
}

# Setup shell
setup_shell() {
    log_info "Setting up fish shell..."
    
    # Change default shell to fish
    if ! grep -q "fish" /etc/shells; then
        command -v fish | sudo tee -a /etc/shells
    fi
    chsh -s "$(command -v fish)" || log_error "Failed to change shell to fish"
    
    # Install starship config
    if [ -f "$DOTFILES_DIR/starship.toml" ]; then
        ln -sf "$DOTFILES_DIR/starship.toml" "$CONFIG_DIR/starship.toml"
    fi
    
    log_success "Shell setup complete"
}

# Link configuration files
link_configs() {
    log_info "Linking configuration files..."
    
    # Link configs from dotfiles
    configs=(
        "fish"
        "kitty"
        "alacritty"
        "nvim"
        "dunst"
    )
    
    for config in "${configs[@]}"; do
        if [ -d "$DOTFILES_DIR/$config" ]; then
            ln -sf "$DOTFILES_DIR/$config" "$CONFIG_DIR/"
            log_success "Linked $config configuration"
        else
            log_warning "Configuration for $config not found in dotfiles"
        fi
    done
}

# Start services
start_services() {
    log_info "Starting and enabling services..."
    
    services=(
        "NetworkManager"
        "pipewire"
        "pipewire-pulse"
    )
    
    for service in "${services[@]}"; do
        sudo systemctl enable --now "$service" || log_warning "Failed to enable $service"
    done
    
    log_success "Services started"
}

# Main function
main() {
    echo -e "${BOLD}${BLUE}=== Arch Linux Setup Script ===${NC}"
    
    check_root
    check_requirements
    create_directories
    install_packages
    clone_repos
    setup_shell
    link_configs
    start_services
    
    log_success "Setup completed successfully!"
    log_info "Please log out and log back in for all changes to take effect."
}

# Run main function
main "$@"
